// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package config generated by go-bindata.// sources:
// configs/config.ini
// configs/migrations/01_initial.up.sql
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x61\x8f\x1a\x37\x10\xfd\xee\x5f\x31\x1f\x73\x95\xb2\x25\x52\x55\x9d\x8a\xf8\xb0\x77\x10\x82\xb2\xb0\xe8\x96\xa4\x55\x4f\x15\x32\xeb\xd9\x5d\xeb\x8c\x87\x78\x66\xa1\xf4\xd7\x57\xf6\x72\x29\x89\x9a\xe4\xe0\x0b\x1a\xcf\x7b\x6f\x3c\xef\x99\x47\xc6\x70\xc4\xf0\x97\x1a\x43\x6e\x4c\x40\x66\x20\x0f\xa7\xce\xd6\x1d\x48\x87\x30\x1c\x83\xb3\x2c\xe8\x39\x53\xc5\xa2\xda\xcc\x56\xdb\x7c\x3a\x7d\x98\x55\x15\x4c\x60\x94\xa5\xaf\x52\x63\x58\x53\x90\xef\xa3\xd7\xe5\xc3\x06\x26\x70\x3b\xba\x1d\x29\xf5\x68\xb4\xe8\x9d\x66\x8c\xe2\xd3\xcb\x6f\x60\x14\xb1\xbe\xe5\x0c\xde\x52\x00\x4f\x27\x20\xef\xce\x70\x20\x96\x36\x20\x7f\x72\x60\x19\xb8\x3f\x1c\x28\x08\x9a\x4c\xbd\x2b\xab\x48\xe9\xa8\xd6\xae\x23\x16\xf5\xa1\x9a\x3d\xc0\xe4\x33\x40\xad\xf3\xaa\xfa\xbd\x7c\x98\x5e\xd7\xa6\x77\xdb\x55\xbe\x9c\x5d\x97\xd4\x18\xaa\xaa\x80\x3d\x19\x04\x21\xd8\x21\xf4\x8c\x06\x4e\x56\xba\x2b\xf1\x0c\x3e\x6a\x67\x4d\x6a\x63\xd0\x01\x7f\x53\x63\xf8\x09\x8c\x65\xbd\x73\x08\xaf\x61\x45\x91\x26\x15\x03\x7e\xea\x6d\x88\xc5\xdc\x9d\xf4\x99\x13\xff\x2b\x7e\xb2\x07\x38\x62\xb0\x8d\xad\xb5\x58\xf2\x37\xa9\x39\x55\xce\xaf\x6b\xfd\x55\xfb\x50\x07\xe9\xb4\xa4\x8d\xd6\x18\x64\x80\x22\x1c\x02\x32\x7a\x41\x03\xbb\xd8\x81\x6a\x0c\xf0\xbc\xf2\x93\x66\x60\xdb\xfa\xe1\x50\x83\x84\x9e\x63\xe7\x7d\xfe\x85\x5e\xd3\x3b\xf7\x62\x45\x4b\xfe\x0b\xcd\xa4\x77\x65\xf3\xb7\x35\x41\x7b\x73\xdd\x19\x8d\x02\xaf\xf7\xc3\xc8\x7b\x2d\x75\x87\x9c\x1a\xc8\x23\x58\xff\xf5\x55\x6f\x54\x55\x15\xdb\x65\x39\x8d\x96\x5d\x96\xad\xd4\xa3\xa3\x96\x63\x78\x96\xd6\xdb\x7d\xbf\x07\x47\x2d\x38\x3c\xa2\xcb\x54\x51\xce\xb7\xc5\xec\xe3\xac\x88\x11\x4d\xe6\x76\xd4\x3b\x13\x5b\x38\x9a\x7b\x0a\x56\x04\x7d\xb4\xba\xb1\x0e\x33\xf5\x76\x51\xcc\xb6\x45\x39\x9f\x2f\x56\x73\x98\xc4\xd9\xf1\xfb\xb0\x9a\x3c\x93\x43\x78\xc5\x62\xa8\x97\x9b\x4c\xdd\x97\xab\xaa\xfc\x5f\x96\xb5\x96\x2e\x62\xe2\x80\x51\x8e\x21\xa0\xd3\x62\x8f\x29\x6b\x27\x0a\x4f\xd6\xb7\x60\x6c\xc0\x5a\x28\x9c\x33\x35\x86\x85\x40\xad\x3d\x68\xc7\x29\x8c\x7c\xc0\xda\x36\x16\x0d\x68\x06\xbd\x63\x72\x7d\x4c\x80\x96\x6e\xb8\xeb\x3a\xdf\xbc\x4b\xcf\xa0\xe5\x9f\x7b\xc6\xc0\x99\xa3\x36\x4a\x4f\xbe\xf5\x89\x97\xbb\xbc\x35\x68\x28\xa4\xb9\x22\xbe\xb5\xbe\xfd\x01\x6e\xa9\xff\x06\xb6\xff\x20\x50\x93\x9c\x7a\xbe\x16\xec\xb0\xa1\x80\x60\x85\x21\x90\xe8\x68\xbe\xf5\xb0\xbc\xcb\xd4\x32\xff\x63\x5b\x2d\xfe\x8c\xfe\xbd\x19\x5d\x28\x74\xfb\x52\x06\xa3\xcf\x3c\x70\xe4\xf3\x6b\x8a\xe4\xba\xef\xf7\x3b\x0c\x91\xe9\x19\xf1\xdf\x9a\x85\xe0\x09\xf1\x30\x60\xef\xf2\xfb\xf7\x1f\xd6\xd5\x80\x4f\xe9\xb1\x3e\xc6\x67\xf5\x99\x80\xb1\x26\x6f\x78\x08\x7f\x3a\x07\xa1\x27\xf4\xf1\x3f\xe7\x18\x1f\x7e\x74\x66\x8a\x8d\xee\x9d\xc4\xda\x9b\xd1\x65\xb4\x4d\xf9\x7e\xb6\xda\x6e\x36\x31\x6e\xb7\xbf\xfe\x32\x1a\x8d\xd4\xbf\x01\x00\x00\xff\xff\xc0\x92\xcf\x22\x5a\x05\x00\x00")

func configIniBytes() ([]byte, error) {
	return bindataRead(
		_configIni,
		"config.ini",
	)
}

func configIni() (*asset, error) {
	bytes, err := configIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.ini", size: 1370, mode: os.FileMode(420), modTime: time.Unix(1603538890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations01_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func migrations01_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initialUpSql,
		"migrations/01_initial.up.sql",
	)
}

func migrations01_initialUpSql() (*asset, error) {
	bytes, err := migrations01_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_initial.up.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1603549757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.ini":                   configIni,
	"migrations/01_initial.up.sql": migrations01_initialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.ini": &bintree{configIni, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"01_initial.up.sql": &bintree{migrations01_initialUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
