// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package config generated by go-bindata.// sources:
// configs/config.ini
// configs/migrations/01_initial.up.sql
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x8f\xdb\x36\x10\xbd\xf3\x57\xcc\x31\x5b\x20\xaa\x83\x02\x45\x50\xc3\x07\xed\x5a\x71\x8c\xc8\x96\xb1\x72\xd2\xa2\x8b\xc2\xa0\xc5\x91\x44\x2c\xcd\x71\x38\x23\xbb\xee\xaf\x2f\x48\xed\xa6\x4e\xd0\x7c\xd8\x17\x61\xf4\x3e\x48\xbe\x47\x3d\x30\x86\x13\x86\xbf\xd4\x14\x72\x63\x02\x32\x03\x79\x38\xf7\xb6\xe9\x41\x7a\x84\xf1\x35\x38\xcb\x82\x9e\x33\x55\x2e\xeb\x6d\xb1\xde\xe5\xf3\xf9\x7d\x51\xd7\x30\x83\x49\x96\xfe\x4a\x4d\x61\x43\x41\xbe\xcd\xde\x54\xf7\x5b\x98\xc1\xeb\xc9\xeb\x89\x52\x0f\x46\x8b\xde\x6b\xc6\x68\x3e\x7f\x7a\x06\x46\x11\xeb\x3b\xce\xe0\x0d\x05\xf0\x74\x06\xf2\xee\x02\x47\x62\xe9\x02\xf2\x47\x07\x96\x81\x87\xe3\x91\x82\xa0\xc9\xd4\xdb\xaa\x8e\x92\x8e\x1a\xed\x7a\x62\x51\xef\xeb\xe2\x1e\x66\x9f\x08\x6a\x93\xd7\xf5\xef\xd5\xfd\xfc\x7a\x36\xbf\xdd\xad\xf3\x55\x71\x3d\x52\x53\xa8\xeb\x12\x0e\x64\x10\x84\x60\x8f\x30\x30\x1a\x38\x5b\xe9\xaf\xcc\x33\xf8\xa0\x9d\x35\x09\xc6\xa0\x03\xfe\xa6\xa6\xf0\x13\x18\xcb\x7a\xef\x10\x5e\xc2\x9a\xa2\x4c\x1a\x06\xfc\x38\xd8\x10\x87\xb9\x3b\xeb\x0b\x27\xfd\x17\xfc\x68\x8f\x70\xc2\x60\x5b\xdb\x68\xb1\xe4\x6f\x12\x38\x4d\x2e\x2f\x1b\xfd\x05\x7c\x9c\x83\xf4\x5a\xd2\x89\x36\x18\x64\xa4\x22\x1c\x03\x32\x7a\x41\x03\xfb\x88\x40\x35\x05\x78\x3e\xf2\xb3\x66\x60\xdb\xf9\xf1\xa5\x06\x09\x03\x47\xe4\x5d\xfe\x99\x5f\x3b\x38\xf7\xc3\x8e\x96\xfc\x67\x9e\xc9\xef\x2a\xe6\xaf\x7b\x82\xf6\xe6\x1a\x19\x83\x02\xaf\x0f\xe3\x92\x0f\x5a\x9a\x1e\x39\x01\xc8\x23\x58\xff\xe5\x56\x6f\x54\x5d\x97\xbb\x55\x35\x8f\x91\x3d\x1d\xb6\x52\x0f\x8e\x3a\x8e\xe5\x59\x59\x6f\x0f\xc3\x01\x1c\x75\xe0\xf0\x84\x2e\x53\x65\xb5\xd8\x95\xc5\x87\xa2\x8c\x15\x4d\xe1\xf6\x34\x38\x13\x21\x1c\xc3\x3d\x07\x2b\x82\x3e\x46\xdd\x5a\x87\x99\x7a\xb3\x2c\x8b\x5d\x59\x2d\x16\xcb\xf5\x02\x66\x71\xed\xf8\x6d\x5a\x43\x9e\xc9\x21\xbc\x60\x31\x34\xc8\x4d\xa6\xee\xaa\x75\x5d\xfd\xaf\xca\x46\x4b\x1f\x39\x71\x81\xd1\x8e\x21\xa0\xd3\x62\x4f\xa9\x6b\x67\x0a\x8f\xd6\x77\x60\x6c\xc0\x46\x28\x5c\x32\x35\x85\xa5\x40\xa3\x3d\x68\xc7\xa9\x8c\x7c\xc4\xc6\xb6\x16\x0d\x68\x06\xbd\x67\x72\x43\x6c\x80\x96\x7e\xdc\xeb\x26\xdf\xbe\x4d\xd7\xa0\xe3\x9f\x07\xc6\xc0\x99\xa3\x2e\x5a\xcf\xbe\xf6\x8b\x9b\x7b\xba\x6b\xd0\x52\x48\xeb\x8a\xfc\xce\xfa\xee\x3b\xbc\x95\xfe\x1b\xd8\xfe\x83\x40\x6d\x4a\xea\x79\x5b\xb0\xc7\x96\x02\x82\x15\x86\x40\xa2\x63\xf8\xd6\xc3\xea\x36\x53\xab\xfc\x8f\x5d\xbd\xfc\x33\xe6\xf7\x6a\xf2\x24\xa1\xbb\x1f\x55\x30\xfa\xc2\xa3\x46\xbe\xb8\x96\x48\xa9\xfb\xe1\xb0\xc7\x10\x95\x9e\x19\xff\x1d\xb3\x10\x3c\x22\x1e\x47\xee\x6d\x7e\xf7\xee\xfd\xa6\x1e\xf9\xa9\x3d\xd6\xc7\xfa\xac\x3f\x09\x30\x36\xe4\x0d\x8f\xe5\xd7\x4d\x13\x3f\x87\x42\x8f\xe8\xe3\x47\xe7\x14\x6f\x7e\x8c\x66\x8e\xad\x1e\x9c\xc4\xd9\x2b\xe8\x69\x08\x99\xda\x56\xef\x8a\xf5\x6e\xbb\x8d\x75\xfb\xe5\xd7\xc9\x44\xfd\x1b\x00\x00\xff\xff\x62\xac\xa9\xab\x58\x05\x00\x00")

func configIniBytes() ([]byte, error) {
	return bindataRead(
		_configIni,
		"config.ini",
	)
}

func configIni() (*asset, error) {
	bytes, err := configIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.ini", size: 1368, mode: os.FileMode(420), modTime: time.Unix(1603895862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations01_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x4f\x83\x40\x10\xc5\xef\x7c\x8a\x77\x6c\x93\xe2\x17\xf0\x84\x74\x1a\x89\x94\xd6\xed\x12\xad\x17\xb2\xb2\xd3\xb0\xb1\x85\x66\x17\x34\x7e\x7b\x03\xfd\x67\xab\xc6\x34\x61\x6f\x93\x0c\x8f\xf7\xde\x2f\x13\x0a\x0a\x24\x41\x06\x77\x31\xa1\x71\x6c\x9d\x37\xf0\x00\xa0\x31\x1a\xc7\x27\xe9\x59\x62\x2e\xa2\x69\x20\x96\x78\xa0\xe5\xc8\xeb\x76\x78\xa3\xcc\xfa\x6c\xe7\xba\x97\xcc\x24\x92\x34\x8e\x91\x26\xd1\x63\x4a\xa3\x4e\xb4\x54\x1b\x46\x0f\xa2\x7b\x8f\x5b\xe5\xdc\x47\x65\x75\x4f\x72\x5a\xd5\x9c\xe5\x96\x55\xcd\x1a\x32\x9a\xd2\x42\x06\xd3\x39\x9e\x22\x79\xdf\x8d\x78\x99\x25\x84\x31\x4d\x82\x34\x96\x08\x53\x21\x28\x91\xd9\x69\xf1\x20\xe7\x0d\x6f\x3d\xcf\xf7\x21\x78\x65\xd9\x15\xa8\xab\x37\x2e\x1d\x7c\xdf\x3b\x23\xa2\x9a\xba\xe0\xb2\x36\x79\xfb\xbf\x4c\xf3\xbb\xc9\xf9\x48\xc8\xb1\xcd\x0e\x94\xba\x64\x82\x26\x24\x28\x09\x69\xb1\x43\x89\x41\x63\xf4\x10\xb3\x04\x63\x8a\x49\x12\xc2\x60\x11\x06\x63\xba\x4c\xd6\x4e\xbe\x0f\xd9\x7a\x80\x2b\xaa\x66\xad\xf1\xca\x28\x94\x2b\x58\x63\x55\x59\x28\xad\x59\xc3\x71\xde\x58\x53\x7f\xde\xb4\x3e\xdb\x8f\x3a\xd7\xfd\xb1\xea\xab\xdc\x5d\xa2\xb5\x72\x75\xd6\x38\xee\x1a\xfa\x53\xed\x7f\x73\x1d\xaa\x1f\x77\x92\x6d\xd9\x6e\x8c\x73\xa6\x2a\x7f\x01\x72\x1d\x8e\x73\xdf\x27\xe1\x2b\x2b\xbd\x68\x73\x77\x54\x18\xec\x6d\x8d\xbe\x09\x0f\xdb\x4c\x5f\x01\x00\x00\xff\xff\x0f\xfc\xa0\x7b\xfb\x03\x00\x00")

func migrations01_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initialUpSql,
		"migrations/01_initial.up.sql",
	)
}

func migrations01_initialUpSql() (*asset, error) {
	bytes, err := migrations01_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_initial.up.sql", size: 1019, mode: os.FileMode(420), modTime: time.Unix(1603646265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.ini":                   configIni,
	"migrations/01_initial.up.sql": migrations01_initialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.ini": &bintree{configIni, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"01_initial.up.sql": &bintree{migrations01_initialUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
