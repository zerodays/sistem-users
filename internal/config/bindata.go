// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package config generated by go-bindata.// sources:
// configs/config.ini
// configs/migrations/01_initial.up.sql
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x8f\xdb\x36\x10\x7c\xe7\xaf\xd8\xc7\x5c\x81\xa8\x4e\xd3\x16\x41\x0d\x3f\xe8\xce\x8e\x63\x44\xb6\x8c\x93\x93\x16\x3d\x14\x06\x2d\xae\x24\xe2\x68\xae\xc3\x5d\xd9\x75\x7f\x7d\x41\xea\x9c\x3a\x41\xf3\x61\xbf\x08\xab\x9d\x99\xe5\xce\x50\x0f\x8c\xe1\x88\xe1\x2f\x35\x86\xdc\x98\x80\xcc\x40\x1e\x4e\x9d\xad\x3b\x90\x0e\x61\x78\x0d\xce\xb2\xa0\xe7\x4c\x15\x8b\x6a\x33\x5b\x6d\xf3\xe9\xf4\x7e\x56\x55\x30\x81\x51\x96\xfe\x4a\x8d\x61\x4d\x41\xbe\x8e\x5e\x97\xf7\x1b\x98\xc0\xab\xd1\xab\x91\x52\x0f\x46\x8b\xde\x69\xc6\x28\x3e\x7d\x7a\x06\x46\x11\xeb\x5b\xce\xe0\x35\x05\xf0\x74\x02\xf2\xee\x0c\x07\x62\x69\x03\xf2\x07\x07\x96\x81\xfb\xc3\x81\x82\xa0\xc9\xd4\x9b\xb2\x8a\x94\x8e\x6a\xed\x3a\x62\xb9\x68\xfc\xf2\xf3\xcb\x9f\xd4\xbb\x6a\x76\x0f\x93\x8f\x60\xb5\xce\xab\xea\xf7\xf2\x7e\x7a\x5d\x9b\xde\x6e\x57\xf9\x72\x76\x5d\x52\x63\xa8\xaa\x02\xf6\x64\x10\x84\x60\x87\xd0\x33\x1a\x38\x59\xe9\xae\x06\xc9\xe0\xbd\x76\xd6\xa4\x36\x06\x1d\xf0\x37\x35\x86\x1f\xc0\x58\xd6\x3b\x87\xf0\x1c\x56\x14\x69\x52\x31\xe0\x87\xde\x86\x58\xcc\xdd\x49\x9f\x39\xf1\x3f\xe3\x47\x7b\x80\x23\x06\xdb\xd8\x5a\x8b\x25\x7f\x93\x9a\x53\xe5\xfc\xbc\xd6\x9f\xb5\x0f\x75\x90\x4e\x4b\xda\x6e\x8d\x41\x06\x28\xc2\x21\x20\xa3\x17\x34\xb0\x8b\x1d\xa8\xc6\x00\x97\xf5\x9f\x34\x03\xdb\xd6\x0f\x2f\x35\x48\xe8\x39\x76\xde\xe5\x9f\xe8\x35\xbd\x73\xdf\xad\x68\xc9\x7f\xa2\x99\xf4\xae\x2c\xff\xb2\x26\x68\x6f\xae\x3b\xa3\x69\xe0\xf5\x7e\x18\x79\xaf\xa5\xee\x90\x53\x03\x79\x04\xeb\x3f\x3f\xea\x8d\xaa\xaa\x62\xbb\x2c\xa7\xd1\xb2\xa7\x65\x2b\xf5\xe0\xa8\xe5\x18\xa4\xa5\xf5\x76\xdf\xef\xc1\x51\x0b\x0e\x8f\xe8\x32\x55\x94\xf3\x6d\x31\x7b\x3f\x2b\x62\x5c\x93\xb9\x1d\xf5\xce\xc4\x16\x8e\xe6\x9e\x82\x15\x41\x1f\xad\x6e\xac\xc3\x4c\xbd\x5e\x14\xb3\x6d\x51\xce\xe7\x8b\xd5\x1c\x26\x71\x76\xfc\x3a\xac\x26\xcf\xe4\x10\x9e\xb1\x18\xea\xe5\x26\x53\x77\xe5\xaa\x2a\xff\x97\x65\xad\xa5\x8b\x98\x38\x60\x94\x63\x08\xe8\xb4\xd8\x63\xca\xda\x89\xc2\xa3\xf5\x2d\x18\x1b\xb0\x16\x0a\xe7\x4c\x8d\x61\x21\x50\x6b\x0f\xda\x71\x0a\x23\x1f\xb0\xb6\x8d\x45\x03\x9a\x41\xef\x98\x5c\x1f\x13\xa0\xa5\x1b\xce\xba\xce\x37\x6f\xd2\x95\x68\xf9\xc7\x9e\x31\x70\xe6\xa8\x8d\xd2\x93\x2f\xfd\xe2\xe1\x9e\xee\x1d\x34\x14\xd2\x5c\x11\xdf\x5a\xdf\x7e\x03\xb7\xd4\x7f\x03\xdb\x7f\x10\xa8\x49\x4e\x5d\x8e\x05\x3b\x6c\x28\x20\x58\x61\x08\x24\x3a\x9a\x6f\x3d\x2c\x6f\x33\xb5\xcc\xff\xd8\x56\x8b\x3f\xa3\x7f\x2f\x46\x4f\x14\xba\xfd\x5e\x06\xa3\xcf\x3c\x70\xe4\xf3\x6b\x8a\xe4\xba\xef\xf7\x3b\x0c\x91\xe9\x82\xf8\x6f\xcd\x42\xf0\x88\x78\x18\xb0\xb7\xf9\xdd\xdb\x77\xeb\x6a\xc0\xa7\xf4\x58\x1f\xe3\xb3\xfa\x48\xc0\x58\x93\x37\x3c\x84\x5f\xd7\x75\xfc\x34\x0a\x3d\xa2\x8f\x1f\xa0\x63\xbc\xf9\xd1\x9a\x29\x36\xba\x77\x12\x6b\x2f\xa0\xa3\x3e\x64\x6a\x53\xbe\x9d\xad\xb6\x9b\x4d\x8c\xdb\xcb\x5f\x47\x23\xf5\x6f\x00\x00\x00\xff\xff\x8a\xad\xfc\x5e\x64\x05\x00\x00")

func configIniBytes() ([]byte, error) {
	return bindataRead(
		_configIni,
		"config.ini",
	)
}

func configIni() (*asset, error) {
	bytes, err := configIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.ini", size: 1380, mode: os.FileMode(420), modTime: time.Unix(1603994307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations01_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x4f\x83\x40\x10\xc5\xef\x7c\x8a\x77\x6c\x93\xe2\x17\xf0\x84\x74\x1a\x89\x94\xd6\xed\x12\xad\x17\xb2\xb2\xd3\xb0\xb1\x85\x66\x17\x34\x7e\x7b\x03\xfd\x67\xab\xc6\x34\x61\x6f\x93\x0c\x8f\xf7\xde\x2f\x13\x0a\x0a\x24\x41\x06\x77\x31\xa1\x71\x6c\x9d\x37\xf0\x00\xa0\x31\x1a\xc7\x27\xe9\x59\x62\x2e\xa2\x69\x20\x96\x78\xa0\xe5\xc8\xeb\x76\x78\xa3\xcc\xfa\x6c\xe7\xba\x97\xcc\x24\x92\x34\x8e\x91\x26\xd1\x63\x4a\xa3\x4e\xb4\x54\x1b\x46\x0f\xa2\x7b\x8f\x5b\xe5\xdc\x47\x65\x75\x4f\x72\x5a\xd5\x9c\xe5\x96\x55\xcd\x1a\x32\x9a\xd2\x42\x06\xd3\x39\x9e\x22\x79\xdf\x8d\x78\x99\x25\x84\x31\x4d\x82\x34\x96\x08\x53\x21\x28\x91\xd9\x69\xf1\x20\xe7\x0d\x6f\x3d\xcf\xf7\x21\x78\x65\xd9\x15\xa8\xab\x37\x2e\x1d\x7c\xdf\x3b\x23\xa2\x9a\xba\xe0\xb2\x36\x79\xfb\xbf\x4c\xf3\xbb\xc9\xf9\x48\xc8\xb1\xcd\x0e\x94\xba\x64\x82\x26\x24\x28\x09\x69\xb1\x43\x89\x41\x63\xf4\x10\xb3\x04\x63\x8a\x49\x12\xc2\x60\x11\x06\x63\xba\x4c\xd6\x4e\xbe\x0f\xd9\x7a\x80\x2b\xaa\x66\xad\xf1\xca\x28\x94\x2b\x58\x63\x55\x59\x28\xad\x59\xc3\x71\xde\x58\x53\x7f\xde\xb4\x3e\xdb\x8f\x3a\xd7\xfd\xb1\xea\xab\xdc\x5d\xa2\xb5\x72\x75\xd6\x38\xee\x1a\xfa\x53\xed\x7f\x73\x1d\xaa\x1f\x77\x92\x6d\xd9\x6e\x8c\x73\xa6\x2a\x7f\x01\x72\x1d\x8e\x73\xdf\x27\xe1\x2b\x2b\xbd\x68\x73\x77\x54\x18\xec\x6d\x8d\xbe\x09\x0f\xdb\x4c\x5f\x01\x00\x00\xff\xff\x0f\xfc\xa0\x7b\xfb\x03\x00\x00")

func migrations01_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initialUpSql,
		"migrations/01_initial.up.sql",
	)
}

func migrations01_initialUpSql() (*asset, error) {
	bytes, err := migrations01_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_initial.up.sql", size: 1019, mode: os.FileMode(420), modTime: time.Unix(1603646265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.ini":                   configIni,
	"migrations/01_initial.up.sql": migrations01_initialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.ini": &bintree{configIni, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"01_initial.up.sql": &bintree{migrations01_initialUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
